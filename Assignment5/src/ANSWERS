## Part 1: 
This assignment is based on the code of assignment 1 from 09.10.2019

We created XXX 21 XXX tests with each containing many assertions and the following 6 tests failed: 

1.1) In PlayerTest.java: createNullPlayer()
- This test failed because we did not check in the Player constructor if the player is null
- we discovered this while checking corner cases in the Player constructor in the above described test
- we fixed this bug by inserting an if statement which checks if a player is null in the Player
constructor and if so, throwing an IllegalArgumentException with the message "cannot create null player"

1.2) In PlayerTest.java: createEmptyNamePlayer()
- This test failed because we did not check in the Player constructor if the player name is an empty string
- we discovered this while checking corner cases in the Player constructor in the above described test
- we fixed this bug by inserting an if statement which checks if a players name is an empty string in the Player
constructor and if so, throwing an illegalArgumentException with the message "cannot create empty name player"
     
1.3) In PlayerTest.java: createPlayerPositionSmallerThanOne()
- This test failed because we did not check in the Player constructor if the player position is smaller than one
- we discovered this while checking corner cases in the Player constructor in the above described test
- we fixed this bug by inserting an if statement which checks if a players position is smaller than one in the Player
constructor and if so, throwing an illegalArgumentException with the message "cannot create player at negative position"

1.4) In GameTest.java: gameConstructorNullPlayerInput()
- This test failed because we did not check in the Game constructor if a Player name is null
- we discovered this while checking corner cases in the Game constructor in the above described test
- we fixed this bug by inserting an if statement which checks if a Player is null that is passed to the Game
constructor and if so, throwing an illegalArgumentException with the message ""cannot create game with board size < 2""

1.5) In GameTest.java: gameConstructorEmptyStringInput()
- This test failed because we did not check in the Game constructor if a Player name is empty String
- we discovered this while checking corner cases in the Game constructor in the above described test
    we don't want to allow empty names since with an empty name you can not see on the printed game state in the console
    where the players is at the moment and when a game is finished, you can not see who has won. Therefore, we want to provide
    the user to make the mistake and typing in an empty name
- we fixed this bug by inserting an if statement which checks if a Player name is empty String that is passed to the Game
constructor and if so, throwing an illegalArgumentException with the message "cannot create game with no name players"

1.6) In GameTest.java: gameConstructorBoardSizeSmallerThan2()
- This test failed because we did not check in the Game constructor if the boardsize is an int smaller than two
- we discovered this while checking corner cases in the Game constructor in the above described test
    a boardsize <= 1 makes obviously no sense. Therefore, we do not allow this. Also, a boardsize of two does not really make sense but here we want
    to let the user decide if this makes sense for him/her.
- we fixed this bug by inserting an if statement which checks if the boardsize is smaller than two that is passed to the Game
constructor and if so, throwing an illegalArgumentException with the message "cannot create game with boardsize < 2"


after testing and fixing the bugs, every test passes and the game works fine.
Note that we had to create some getters and setters in order to access private attributes in tests.
In addition to all above described test we let the game run and noticed that when you pass in an empty
name string for player1 name, then the program asks for the name of the second player even if after getting
input the program will terminate due to built in exception throwings.
To fix that and make the program more user friendly we additionally inserted if statements which check for empty string names/ null names and 
boardsizes smaller than two and if so throw an exception, like we also did in the player and game constructor. Therefore, it is obvoius that
the Game constructor and the Player constructor will never receive empty string player name inputs or invalid boardsizes. 
This makes the invalid input checking in the Game and Player constructor seem kind of unnecessary, but in fact it isn't since
we want every part of our program to work on its own and they should not be dependent of other parts of the program and 
therefore be encapsulated from other parts. 



## Part 2:

2.1) All changes were made in GameBoard.java: 
In the GameBoardTest.java following tests failed:

- markTwice: This test failed because the mark(int row, int col, TicTacToeGameState.Player player) method of class GameBoard returned wrong boolean values (they were switched).
Following changes were performed in order to correct the code and let the test pass:
    
    - the return statement had to be changed from TRUE to FALSE, 
    if the board square was already occupied 
    
    - the return statement had to be changed from FALSE to TRUE,
    if the board square was not already occupied.
    
- getOpenPositions: This test failed because the column started iterating at index 1 instead of index 0 in the getOpenPositions()
method of the GameBoard class.
Following changes were performed in order to correct the code and let the test pass:

    - the index where the column starts to iterate had to be changed to 0.
    
- getOpenPositionsAll: This test failed for the same reason as the test above "getOpenPositions" failed and 
hence same changes were performed. 

- markOnBoard: This test failed because in the javaDoc description of the GameBoard constructor the @param "the board to copy" was not named right.
Following changes were performed in order to correct the code and let the test pass:

    - In the JavaDoc of the GameBoard constructor, the @param parameter had to be changed from BOARD to OTHER


2.2) All changes were made in TicTacToeGameState.java:
In the TicTacToeGameStateTest.java following tests failed:

- startingPlayerIsX, getAvailableStatesLastOne and switchPlayer: these tests failed because the getCurrentPlayer() method from
the TicTacToeGameState class returned a random player instead of the current player.
Following changes were performed in order to correct the code and let the tests pass:
                                                                                         
    - we deleted the short code which generated a random player in the getCurrentPlayer() method.
    Like this the current player is returned.
    
- IsOverWin, hasWinCol, and hasWinTow: these tests failed because the hasWin(Player player) method returned false if the player had a complete row or if
the player had a complete column. What obviously makes no sense.
Following changes were performed in order to correct the code and let the tests pass:

    - In the hasWin(Player player) method, we have changed the return value from FALSE to TRUE if the player had a complete row
    or a complete column.

- hasWinDiagonal: this test failed because of an index mistake in the completesDiagonal(Player player) method. Instead of looking 
at the diagonal from the top-left to the bottom-right, it considered the middle-right square.
Following changes were performed in order to correct the code and let the tests pass:
    
    - In the completesDiagonal(Player player) method we changed the index from board.getMark(1, 2) to board.getMark(2, 2).
    
## Part 3

